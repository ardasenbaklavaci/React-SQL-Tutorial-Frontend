{"ast":null,"code":"var _jsxFileName = \"E:\\\\React\\\\react-sql-frontend\\\\src\\\\users.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Users() {\n  _s();\n  const [users, setUsers] = useState([]); // State to store the list of users\n  const [name, setName] = useState(''); // State to store the name for the new user\n  const [email, setEmail] = useState(''); // State to store the email for the new user\n  const [message, setMessage] = useState(''); // State to store the success/failure message\n\n  // Fetch users from the backend when the component loads\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const response = await axios.get('http://localhost:3001/users');\n        setUsers(response.data); // Set the users state with the fetched data\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    };\n    fetchUsers(); // Call the fetch function\n  }, []);\n\n  // Handle form submission to add a new user\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const userData = {\n      Name: name,\n      Email: email\n    };\n    try {\n      const response = await axios.post('http://localhost:3001/users', userData);\n      setMessage(`User added successfully! ID: ${response.data.id}`);\n\n      // Add the new user to the users list without refetching the entire list\n      setUsers([...users, {\n        id: response.data.id,\n        Name: name,\n        Email: email\n      }]);\n\n      // Clear form fields\n      setName('');\n      setEmail('');\n    } catch (error) {\n      console.error('Error adding user:', error);\n      setMessage('Failed to add user.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Users List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: users.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [user.Name, \" (\", user.Email, \")\"]\n      }, user.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a New User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: name,\n          onChange: e => setName(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(Users, \"gOEVbXKaWHm9SQsnNsEDoDLMuaM=\");\n_c = Users;\nexport default Users;\nvar _c;\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Users","_s","users","setUsers","name","setName","email","setEmail","message","setMessage","fetchUsers","response","get","data","error","console","handleSubmit","event","preventDefault","userData","Name","Email","post","id","children","fileName","_jsxFileName","lineNumber","columnNumber","map","user","onSubmit","type","value","onChange","e","target","required","_c","$RefreshReg$"],"sources":["E:/React/react-sql-frontend/src/users.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Users() {\r\n  const [users, setUsers] = useState([]);  // State to store the list of users\r\n  const [name, setName] = useState('');    // State to store the name for the new user\r\n  const [email, setEmail] = useState('');  // State to store the email for the new user\r\n  const [message, setMessage] = useState('');  // State to store the success/failure message\r\n\r\n  // Fetch users from the backend when the component loads\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3001/users');\r\n        setUsers(response.data);  // Set the users state with the fetched data\r\n      } catch (error) {\r\n        console.error('Error fetching users:', error);\r\n      }\r\n    };\r\n\r\n    fetchUsers();  // Call the fetch function\r\n  }, []);\r\n\r\n  // Handle form submission to add a new user\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const userData = {\r\n      Name: name,\r\n      Email: email\r\n    };\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:3001/users', userData);\r\n      setMessage(`User added successfully! ID: ${response.data.id}`);\r\n      \r\n      // Add the new user to the users list without refetching the entire list\r\n      setUsers([...users, { id: response.data.id, Name: name, Email: email }]);\r\n\r\n      // Clear form fields\r\n      setName('');\r\n      setEmail('');\r\n    } catch (error) {\r\n      console.error('Error adding user:', error);\r\n      setMessage('Failed to add user.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Users List</h2>\r\n\r\n      {/* Display list of users */}\r\n      <ul>\r\n        {users.map((user) => (\r\n          <li key={user.id}>\r\n            {user.Name} ({user.Email})\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h2>Add a New User</h2>\r\n      {/* Form to add a new user */}\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Name:</label>\r\n          <input \r\n            type=\"text\" \r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Email:</label>\r\n          <input \r\n            type=\"email\" \r\n            value={email}\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Add User</button>\r\n      </form>\r\n\r\n      {/* Display success or error message */}\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}